<?php// variables de personnalisation$GLOBALS['puce'] = "<img src='IMG/a/puce.png' alt='-'>";# Et on y ajoute quatre nouvelles pour les intertitre :# $GLOBALS['debut_intertitre_2'] = '<h4 class="spip2">';# $GLOBALS['fin_intertitre_2'] = '</h4>';$GLOBALS['debut_intertitre_3'] = '<h5 class="spip2">';$GLOBALS['fin_intertitre_3'] = '</h5>';// fonctions spécifiquesfunction nostyle($texte) {	$texte = (ereg_replace("style='border-width: 0px;'","",$texte)); //Enlève le style appliqué par SPIP dans les logos et images	$texte = (ereg_replace("float: left;","", $texte)); // idem	return $texte;}function fonction($texte) { // cherche la fonction signalée dans la bio entre deux @, puis supprime les @	$texte = ereg("(@[^@]*)@",$texte,$reg); 	$texte = $reg[0];	$texte = ereg_replace("@","",$texte);	return $texte;}function nofonction($texte) {	$texte = ereg_replace("(@[^@]*)@","",$texte); //supprime la fonction signalée entre deux @ de la bio d'un auteur	return $texte;}function titremenu ($texte) { // pour la navigation de premier niveau, affiche les 2 premiers mots du titre de la rubrique, permet de gérer un titre court.	$texte = ereg_replace("[[:space:]]{2,}"," ",$texte); //supprime les doubles espaces -- ou plus -- dans le titre	$menu = explode(" ",$texte);	$texte = $menu[0]." ".$menu[1];	return $texte;}// fin fonctions spécifiques/* *   +----------------------------------+ *    Nom du Filtre :    pagination                                                *   +----------------------------------+ *    Date : dimanche 22 août 2004 *    Auteur :  James (klike<at>free.fr) *   +-------------------------------------+ *    Fonctions de ce filtre : *     affiche la liste des pages d'une boucle contenant *     un critère de limite du type {debut_xxx, yyy} *   +-------------------------------------+  *   * Pour toute suggestion, remarque, proposition d'ajout * reportez-vous au forum de l'article : * http://www.uzine.net/spip_contrib/article.php3?id_article=663*/function pagination($total, $position=0, $pas=1, $fonction='') {  global $clean_link;  global $pagination_item_avant, $pagination_item_apres, $pagination_separateur;  tester_variable('pagination_separateur', '&nbsp;| ');  if (ereg('^debut([-_a-zA-Z0-9]+)$', $position, $match)) {    $debut_lim = "debut".$match[1];    $position = intval($GLOBALS['HTTP_GET_VARS'][$debut_lim]);  }  $nombre_pages = floor(($total-1)/$pas)+1;  $texte = '';  if($nombre_pages>1) {    $i = 0;    while($i<$nombre_pages) {      $clean_link->delVar($debut_lim);      $clean_link->addVar($debut_lim, strval($i*$pas));      $url = $clean_link->getUrl();      if(function_exists($fonction)) $item = call_user_func($fonction, $i+1);      else $item = strval($i+1);      if(($i*$pas) != $position) {        if(function_exists('lien_pagination')) $item = lien_pagination($url, $item, $i+1);        else $item = "<a href=\"".$url."\">".$item."</a>";      }      $texte .= $pagination_item_avant.$item.$pagination_item_apres;      if($i<($nombre_pages-1)) $texte .= $pagination_separateur;      $i++;    }    //Correction bug: $clean_link doit revenir à son état initial    $clean_link->delVar($debut_lim);    if($position) $clean_link->addVar($debut_lim, $position);     return $texte;  }  return '';}// FIN du Filtre pagination// ******************************************// Début fonctions pour la recherche// ******************************************function google_like($string){	$query = rtrim(str_replace("+", " ", $_GET['recherche']));  	$qt = explode(" ", $query);	$num = count ($qt);	$cc = ceil(200 / $num);		for ($i = 0; $i < $num; $i++) {			$tab[$i] = preg_split("/($qt[$i])/i",$string,2, PREG_SPLIT_DELIM_CAPTURE);			if(count($tab[$i])>1){				$avant[$i] = substr($tab[$i][0],-$cc,$cc);	    	    	        $apres[$i] = substr($tab[$i][2],0,$cc);		    	        $string_re .= "[...] $avant[$i]<strong class='surligner'>".$tab[$i][1]."</strong>$apres[$i] [...]";	       }	 }	 return $string_re;}// ******************************************// Fin fonctions recherche// ******************************************// ******************************************// Début fonctions gestion nom// ******************************************/* * Fonction prenom_nom() * * Auteur : François Schreuer <francois@schreuer.org> * http://francois.schreuer.org/ * * Copyright : GNU Public Licence * * Si le nom ET le prénom sont présents, on les renvoie concaténés et * séparés par un espace insécable, le nom étant passé en majuscules * * Dans le cas contraire (soit dans le cas où au moins des deux éléments * est vide), on renvoie les deux d'un coup (et celui qui n'est pas vide * sera affiché). Et s'ils sont tous les deux vides, on renverra du vide, * comme il est de bon ton dans ce genre de situation. *  */function prenom_nom($texte) {	if(strstr(ereg_replace("^(@-|@-|@ |@|#-|#_|# |#)","",$texte),"*")) {		if(prenom($texte) && nom($texte))			return prenom($texte)."&nbsp;".majuscules(nom($texte));		else			return prenom($texte).nom($texte);	}	else		return $texte;}/* * Fonction prenom_nom() *  * Auteur : François Schreuer <francois@schreuer.org> * http://francois.schreuer.org/ *  * Copyright : GNU Public Licence *  * Cette fonction : * - enlève le signe distinctif des secrétaires de rédaction; * - renvoie le prénom après l'avoir passé en minuscules et  *   avoir passé l'initiale en majuscules. *  */function prenom($texte) {	$texte = ereg_replace("^(@-|@-|@ |@|#-|#_|# |#)","",$texte); // On commence par virer le signe distinctif d'un secrétaire de rédaction ou celui d'un traducteur	if(strstr($texte,"*")) {		if($prenom = trim(ereg_replace("(.*)\*(.*)","\\2",$texte))) {			return harmonise_noms($prenom);		}		else {			if(substr($texte,0,1) == "*")				return harmonise_noms($texte);			else				return "";		}	}	else		return "";}/* * Fonction nom() *  * Auteur : François Schreuer <francois@schreuer.org> * http://francois.schreuer.org/ *  * Copyright : GNU Public Licence *  * Cette fonction : * - enlève le signe distinctif des secrétaires de rédaction; * - renvoie le nom après l'avoir passé en minuscules et  *   avoir passé l'initiale en majuscules *  */function nom($texte) {	$texte = ereg_replace("^(@-|@-|@ |@|#-|#_|# |#)","",$texte); // On commence par virer le signe distinctif des secrétaires de rédaction	if(strstr($texte,"*")) {		if($nom = trim(ereg_replace("(.*)\*(.*)","\\1",$texte))) {			return harmonise_noms($nom);		}		else {			if(substr($texte,0,1) == "*")				return "";			else				return harmonise_noms($texte);		}	}	else {		return $texte;	}}/* * Fonction harmonise_noms() *  * Auteur : François Schreuer <francois@schreuer.org> *  * Copyright : GNU Public Licence *  * Harmonise le format de l'affichage des noms. *  * Vous pouvez changer facilement le modèle qui vous convient * en activant la ligne adéquate. *  */function harmonise_noms($texte) {	// Passe tout en minuscule et met les initiales en majuscules	//  return ucwords_amelioree(strtolower(trim(str_replace("*"," ",str_replace("_"," ",$texte)))));	// Ne fait rien	// return trim($texte);	// Passe tout en majuscules (avec la fonction idoine de SPIP)	// return majuscules(trim($texte));	// Met les initiales en majuscules	 return ucwords_amelioree(trim($texte));}/* * Fonction ucwords_amelioree() * * Auteur : François Schreuer <francois@schreuer.org> * * Copyright : GNU Public Licence * * Transforme la première lettre de chaque mot (et de chaque * partie d'un mot composé) d'une chaîne en majuscule. Convertit * aussi les caractères accentués. * * Par exemple, "jean-édern hallier" devient "Jean-Édern Hallier" * *///function ucwords_amelioree($texte) {	// On commence par les mots qui suivent un espace	// $tableau_1 = explode(" ",$texte);    // for($i=0;$i<sizeof($tableau_1);$i++) {	// 	$tableau_1[$i] = ucfirst_fr($tableau_1[$i]); }	// $texte = implode(" ",$tableau_1);		// puis un espace insécable	// $tableau_2 = explode("&nbsp;",$texte);    // for($i=0;$i<sizeof($tableau_2);$i++) {	// 	$tableau_2[$i] = ucfirst_fr($tableau_2[$i]); }	// $texte = implode("&nbsp;",$tableau_2);	// enfin un tiret	// $tableau_3 = explode("-",$texte);    // for($i=0;$i<sizeof($tableau_3);$i++) {	// 	$tableau_3[$i] = ucfirst_fr($tableau_3[$i]); }	// $texte = implode("-",$tableau_3);	// Et on renvoie le tout	//return $texte;//}/* * Autre écriture possible pour ucwords_amelioree() (nettement * plus jolie mais il faut encore implémenter dedans le * traitement des caractères français) :*/function ucwords_amelioree($texte) {return ucwords(preg_replace_callback('`(\w+)(-)(\w+)`','mot_compose',$texte));}// Sous-fonction de la précédentefunction mot_compose($match){	return $match[1].$match[2].ucfirst($match[3]);	}/* * Fonction ucfirst_fr() * * Auteur : François Schreuer <francois@schreuer.org> * * Copyright : GNU Public Licence * * Transforme la première lettre d'une chaîne en majuscule * en traitant aussi les caractères accentués. Il s'agit * donc d'une version améliorée de ucfirst_fr() * * NB : Cette fonction a besoin de la fonction majuscules() * de SPIP * */function ucfirst_fr($chaine) {	return majuscules(substr($chaine,0,1)).substr($chaine,1);}// ******************************************// Fin fonctions gestion des noms// ******************************************?>